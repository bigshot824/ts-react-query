{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useQuery, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nvar client = new QueryClient();\n\nfunction fetchTodos() {\n  var res;\n  return _regeneratorRuntime.async(function fetchTodos$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          res = [{\n            id: '1',\n            first_name: 'aaa',\n            last_name: 'aaa'\n          }, {\n            id: '2',\n            first_name: 'bbb',\n            last_name: 'bbb'\n          }, {\n            id: '3',\n            first_name: 'ccc',\n            last_name: 'ccc'\n          }];\n          return _context.abrupt(\"return\", res);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, _Promise);\n}\n\nfunction useTodos(options) {\n  return useQuery(['todos'], fetchTodos, options);\n}\n\nfunction TodoCounter() {\n  var _counterQuery$data;\n\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  var counterQuery = useTodos({\n    select: function select(data) {\n      return data.items.length;\n    },\n    notifyOnChangeProps: ['data']\n  });\n  React.useEffect(function () {\n    console.log('rendering counter');\n  });\n  return __jsx(\"div\", null, \"TodoCounter: \", (_counterQuery$data = counterQuery.data) !== null && _counterQuery$data !== void 0 ? _counterQuery$data : 0);\n}\n\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: client\n  }, __jsx(TodoCounter, null), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}