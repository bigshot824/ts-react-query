{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\boredguys\\\\Desktop\\\\ts-react-query\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport * as React from 'react';\nimport { useQuery, QueryClient, QueryClientProvider } from 'react-query';\nimport { ReactQueryDevtools } from 'react-query/devtools';\nconst client = new QueryClient();\n\nasync function fetchTodos() {\n  const res = [{\n    id: '1',\n    first_name: 'aaa',\n    last_name: 'aaa'\n  }, {\n    id: '2',\n    first_name: 'bbb',\n    last_name: 'bbb'\n  }, {\n    id: '3',\n    first_name: 'ccc',\n    last_name: 'ccc'\n  }];\n  return res;\n}\n\nfunction useTodos(options) {\n  return useQuery(['todos'], fetchTodos, options);\n}\n\nfunction TodoCounter() {\n  var _counterQuery$data;\n\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  // const counterQuery = useTodos({\n  //   select: data => data.items.length,\n  //   notifyOnChangeProps: ['data'],\n  // })\n  const counterQuery = useTodos();\n  React.useEffect(() => {\n    console.log('rendering counter');\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 10\n    }\n  }, \"TodoCounter: \", (_counterQuery$data = counterQuery.data) !== null && _counterQuery$data !== void 0 ? _counterQuery$data : 0);\n}\n\nexport default function App() {\n  return __jsx(QueryClientProvider, {\n    client: client,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, __jsx(TodoCounter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), __jsx(ReactQueryDevtools, {\n    initialIsOpen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/boredguys/Desktop/ts-react-query/pages/index.tsx"],"names":["React","useQuery","QueryClient","QueryClientProvider","ReactQueryDevtools","client","fetchTodos","res","id","first_name","last_name","useTodos","options","TodoCounter","counterQuery","useEffect","console","log","data","App"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,QAAT,EAAmBC,WAAnB,EAAgCC,mBAAhC,QAA4E,aAA5E;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,MAAMC,MAAM,GAAG,IAAIH,WAAJ,EAAf;;AASA,eAAeI,UAAf,GAA4C;AAC1C,QAAMC,GAAQ,GAAG,CACf;AAAEC,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,UAAU,EAAE,KAAvB;AAA8BC,IAAAA,SAAS,EAAE;AAAzC,GADe,EAEf;AAAEF,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,UAAU,EAAE,KAAvB;AAA8BC,IAAAA,SAAS,EAAE;AAAzC,GAFe,EAGf;AAAEF,IAAAA,EAAE,EAAE,GAAN;AAAWC,IAAAA,UAAU,EAAE,KAAvB;AAA8BC,IAAAA,SAAS,EAAE;AAAzC,GAHe,CAAjB;AAKA,SAAOH,GAAP;AACD;;AAED,SAASI,QAAT,CAAiCC,OAAjC,EAAgG;AAC9F,SAAOX,QAAQ,CAAC,CAAC,OAAD,CAAD,EAAYK,UAAZ,EAAwBM,OAAxB,CAAf;AACD;;AAED,SAASC,WAAT,GAAuB;AAAA;;AACrB;AACA;AACA;AACA;AACA;AACA;AAEA,QAAMC,YAAY,GAAGH,QAAQ,EAA7B;AAEAX,EAAAA,KAAK,CAACe,SAAN,CAAgB,MAAM;AACpBC,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACD,GAFD;AAIA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAAmBH,YAAY,CAACI,IAAhC,mEAAwC,CAAxC,CAAP;AACD;;AAED,eAAe,SAASC,GAAT,GAAe;AAC5B,SACE,MAAC,mBAAD;AAAqB,IAAA,MAAM,EAAEd,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,kBAAD;AAAoB,IAAA,aAAa,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AAMD","sourcesContent":["import * as React from 'react'\nimport axios, { AxiosError } from 'axios'\n\nimport { useQuery, QueryClient, QueryClientProvider, UseQueryOptions } from 'react-query'\nimport { ReactQueryDevtools } from 'react-query/devtools'\n\nconst client = new QueryClient()\n\ntype Todos = {\n  items: readonly {\n    id: string\n    text: string\n  }[]\n}\n\nasync function fetchTodos(): Promise<Todos> {\n  const res: any = [\n    { id: '1', first_name: 'aaa', last_name: 'aaa' },\n    { id: '2', first_name: 'bbb', last_name: 'bbb' },\n    { id: '3', first_name: 'ccc', last_name: 'ccc' },\n  ]\n  return res\n}\n\nfunction useTodos<TData = Todos>(options?: UseQueryOptions<Todos, AxiosError, TData, string[]>) {\n  return useQuery(['todos'], fetchTodos, options)\n}\n\nfunction TodoCounter() {\n  // subscribe only to changes in the 'data' prop, which will be the\n  // amount of todos because of the select function\n  // const counterQuery = useTodos({\n  //   select: data => data.items.length,\n  //   notifyOnChangeProps: ['data'],\n  // })\n\n  const counterQuery = useTodos()\n\n  React.useEffect(() => {\n    console.log('rendering counter')\n  })\n\n  return <div>TodoCounter: {counterQuery.data ?? 0}</div>\n}\n\nexport default function App() {\n  return (\n    <QueryClientProvider client={client}>\n      <TodoCounter />\n      <ReactQueryDevtools initialIsOpen />\n    </QueryClientProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}